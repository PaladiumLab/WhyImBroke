import { z } from 'zod';
import { Types } from 'mongoose';

export const accountZodSchema = z.object({
    userId: z.string().refine(val => Types.ObjectId.isValid(val), { message: 'Invalid userId' }),
    accountType: z.enum(['savings', 'checkings']),
    accountName: z.string(),
    currentAccountBalance: z.number().refine(val => val > 0, { message: 'Account Balance cannot be negative'}),
    initialAccountBalance: z.number().refine(val => val > 0, { message: 'Account Balance cannot be negative'}),
    currency: z.enum(['CAD', 'USD', 'INR']),
    plaidAccountId: z.string().optional(),
    isActive: z.boolean().optional(),
    lastSync: z.date().optional(),
    createdAt: z.date().optional(), // ðŸ”¹ Auto-managed by Mongoose timestamps
    updatedAt: z.date().optional(), // ðŸ”¹ Auto-managed by Mongoose timestamps
});

export type Account = z.infer<typeof accountZodSchema>;

export const createAccountZodSchema = accountZodSchema.omit({
    userId: true,                //extracted from JWT,
    currentAccountBalance: true, //Set equal to initialAccountBalance internally.
    plaidAccountId: true,        //Should not be user provided.
    isActive: true,              //Default value from Session Sync.
    lastSync: true,              // Controlled Internally.
    createdAt: true,             // Auto-generated by Mongoose
    updatedAt: true              // Auto-generated by Mongoose
})

export type createAccountType = z.infer<typeof createAccountZodSchema>;

// âœ… Schema for Updating an Account
export const updateAccountInputValidator = accountZodSchema.omit({
    createdAt: true,  // Users should not modify timestamps
    updatedAt: true
});
